import { NestFactory } from '@nestjs/core';
import { AppModule } from '../src/app.module';
import { UsersService } from '../src/users/users.service';
import { AgenciesService } from '../src/agencies/agencies.service';
import { UserRole } from '../src/users/user.entity';
import * as bcrypt from 'bcryptjs';

async function createTestAgent() {
  const app = await NestFactory.createApplicationContext(AppModule);
  
  try {
    const usersService = app.get(UsersService);
    const agenciesService = app.get(AgenciesService);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è
    const firstNames = ['–ê–ª–µ–∫—Å–∞–Ω–¥—Ä', '–ú–∞—Ä–∏—è', '–î–º–∏—Ç—Ä–∏–π', '–ê–Ω–Ω–∞', '–°–µ—Ä–≥–µ–π', '–ï–ª–µ–Ω–∞', '–ê–Ω–¥—Ä–µ–π', '–û–ª—å–≥–∞', '–ú–∏—Ö–∞–∏–ª', '–¢–∞—Ç—å—è–Ω–∞'];
    const lastNames = ['–ò–≤–∞–Ω–æ–≤', '–ü–µ—Ç—Ä–æ–≤–∞', '–°–∏–¥–æ—Ä–æ–≤', '–ö–æ–∑–ª–æ–≤–∞', '–°–º–∏—Ä–Ω–æ–≤', '–ù–æ–≤–∏–∫–æ–≤–∞', '–ü–æ–ø–æ–≤', '–ú–æ—Ä–æ–∑–æ–≤–∞', '–°–æ–∫–æ–ª–æ–≤', '–í–æ–ª–∫–æ–≤–∞'];
    
    const randomFirstName = firstNames[Math.floor(Math.random() * firstNames.length)];
    const randomLastName = lastNames[Math.floor(Math.random() * lastNames.length)];
    const randomNumber = Math.floor(Math.random() * 1000);
    
    const testEmail = `test.agent.${randomNumber}@example.com`;
    const testPassword = 'qwerty123';

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞...');
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    let agencies = await agenciesService.findAll();
    let agencyId: number;

    if (agencies.length === 0) {
      console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ...');
      const newAgency = await agenciesService.create({
        name: '–¢–µ—Å—Ç–æ–≤–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏'
      });
      agencyId = newAgency.id;
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ: ${newAgency.name} (ID: ${agencyId})`);
    } else {
      agencyId = agencies[0].id;
      console.log(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ: ${agencies[0].name} (ID: ${agencyId})`);
    }

    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await usersService.findOneByEmail(testEmail);
    if (existingUser) {
      console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${testEmail} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
      console.log('üìã –î–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
      console.log(`   ID: ${existingUser.id}`);
      console.log(`   –ò–º—è: ${existingUser.firstName} ${existingUser.lastName}`);
      console.log(`   Email: ${existingUser.email}`);
      console.log(`   –†–æ–ª—å: ${existingUser.role}`);
      console.log(`   –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ ID: ${existingUser.agency?.id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isPasswordCorrect = await bcrypt.compare(testPassword, existingUser.password);
      console.log(`   –ü–∞—Ä–æ–ª—å "qwerty123": ${isPasswordCorrect ? '‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π' : '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π'}`);
      
      if (!isPasswordCorrect) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å...');
        const salt = await bcrypt.genSalt();
        const hashedPassword = await bcrypt.hash(testPassword, salt);
        await usersService['usersRepository'].update(existingUser.id, { password: hashedPassword });
        console.log('‚úÖ –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      }
      
      return;
    }

    console.log('üë§ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...');
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const newUser = await usersService.create({
      email: testEmail,
      password: testPassword,
      firstName: randomFirstName,
      lastName: randomLastName,
      role: UserRole.AGENT,
      agencyId: agencyId
    });

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:');
    console.log(`   ID: ${newUser.id}`);
    console.log(`   –ò–º—è: ${newUser.firstName} ${newUser.lastName}`);
    console.log(`   Email: ${newUser.email}`);
    console.log(`   –†–æ–ª—å: ${newUser.role}`);
    console.log(`   –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ ID: ${newUser.agency?.id}`);
    console.log('');
    console.log('üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:');
    console.log(`   Email: ${testEmail}`);
    console.log(`   –ü–∞—Ä–æ–ª—å: ${testPassword}`);
    console.log('');
    console.log('üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞:', error);
  } finally {
    await app.close();
  }
}

createTestAgent(); 