const sqlite3 = require('sqlite3').verbose();
const path = require('path');

const dbPath = path.resolve(__dirname, '../db.sqlite');
const db = new sqlite3.Database(dbPath);

async function run() {
  // 1. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏ (–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏)
  await new Promise((resolve, reject) => {
    db.run(
      `DELETE FROM calendar_events
       WHERE id NOT IN (
         SELECT MIN(id)
         FROM calendar_events
         GROUP BY title, start, end, type
       );`,
      (err) => {
        if (err) return reject(err);
        console.log('‚úÖ –î—É–±–ª–∏ —É–¥–∞–ª–µ–Ω—ã');
        resolve();
      }
    );
  });

  // 2. –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å (–µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω)
  await new Promise((resolve, reject) => {
    db.run(
      'CREATE UNIQUE INDEX IF NOT EXISTS uniq_event ON calendar_events (title, start, end, type);',
      (err) => {
        if (err) return reject(err);
        console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω (–∏–ª–∏ —É–∂–µ –±—ã–ª)');
        resolve();
      }
    );
  });

  // 3. –í—ã–≤–µ—Å—Ç–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  await new Promise((resolve, reject) => {
    db.all(
      `SELECT title, start, COUNT(*) as cnt
       FROM calendar_events
       WHERE type='public'
       GROUP BY title, start
       HAVING cnt > 1
       ORDER BY cnt DESC
       LIMIT 30;`,
      (err, rows) => {
        if (err) return reject(err);
        if (rows.length) {
          console.log('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏ (title+start):');
          rows.forEach(r => console.log(r));
        } else {
          console.log('–ù–µ—Ç —è–≤–Ω—ã—Ö –¥—É–±–ª–µ–π –ø–æ title+start');
        }
        resolve();
      }
    );
  });

  // 4. –í—ã–≤–µ—Å—Ç–∏ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–æ –¥—É–±–ª—è–º
  await new Promise((resolve, reject) => {
    db.all(
      `SELECT id, title, start, end, type FROM calendar_events WHERE type='public' ORDER BY title, start, end;`,
      (err, rows) => {
        if (err) return reject(err);
        console.log('–í—Å–µ –ø—É–±–ª–∏—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞):');
        rows.forEach(r => console.log(r));
        resolve();
      }
    );
  });

  db.close();
  console.log('üéâ –û—á–∏—Å—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
}

run().catch(e => {
  console.error('–û—à–∏–±–∫–∞:', e);
  db.close();
}); 